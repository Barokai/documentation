---
title: Container Management
category: internals
tags: internals, containers
date: 25/11/2014
---

:markdown
  # Containers management

  ## Shutdown

  Whether you are deploying a new version of your app or for any operation which
  involves container stopping (stop, restart, downscale, deployment).

  We have adopted a standard process:

%ol
  %li Send SIGTERM to the process
  %li Wait 10 seconds
  %li Send SIGKILL if the process is still alive

:markdown

  ### What does it assume?

  To ensure a graceful shutdown, you should catch __SIGTERM__ signal and
  cleanly shutdown your process.

  ### Example

  ```go
  listener, err := net.Listen("tcp", ":"+port)
  if err != nil {
    panic(err)
  }

  go http.Serve(listener, m)

  sigs := make(chan os.Signal)
  signal.Notify(sigs, syscall.SIGTERM)
  <-sigs
  fmt.Println("SIGTERM, time to shutdown")
  listener.Close()
  ```
